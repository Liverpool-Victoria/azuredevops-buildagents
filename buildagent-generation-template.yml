parameters:
  - name: image_type
    displayName: Build Agent Image
    type: string
    default: windows2022
    values:
      - windows2022
      - windows2025
      - ubuntu2204
      - ubuntu2404
  - name: agent_pool
    displayName: Agent Pool
    type: object
    default:
      name: 'ci-agent-pool'
  - name: variable_group_name
    displayName: Variable Group
    type: string
    default: 'Image Generation Variables'
  - name: runner_images_version
    displayName: Runner-Images Version
    type: string
    default: alpha
    values:
      - alpha
      - prerelease
      - release
  - name: depends_on
    displayName: First Stage Depends On
    type: object
    default: ' '
  - name: repository_base_path
    displayName: Scripts Path
    type: string
    default: .

stages:
  - stage: buildagent_template_vm_${{ parameters.image_type }}
    displayName: 'Build Agent Template VM (${{ parameters.image_type }})'
    ${{ if ne(parameters.depends_on, ' ') }}:
      dependsOn: ${{ parameters.depends_on }}
    jobs:
      - job: generate_image
        displayName: Image Generation (${{ parameters.image_type }})
        timeoutInMinutes: '600'
        cancelTimeoutInMinutes: '30'
        variables:
          - group: ${{ parameters.variable_group_name }}
        pool:
          name: ${{ parameters.agent_pool }}

        steps:
          - checkout: self
          
          - task: PowerShell@2
            name: setVars
            displayName: 'Set image template variables'
            inputs:
              targetType: 'inline'
              script: |
                $runner_images_version = '${{ parameters.runner_images_version }}'
                $repository_base_path = '${{ parameters.repository_base_path }}'
                $image_type = '${{ parameters.image_type }}'

                switch ($image_type) {
                  'windows2022' {
                    $os = "windows"
                    $image_os = "win22"
                    $image_readme_name = "Windows2022-Readme.md"
                    $build_template_name = "build.windows-2022.pkr.hcl"
                  }
                  'windows2025' {
                    $os = "windows"
                    $image_os = "win25"
                    $image_readme_name = "Windows2025-Readme.md"
                    $build_template_name = "build.windows-2025.pkr.hcl"
                  }
                  'ubuntu2204' {
                    $os = "ubuntu"
                    $image_os = "ubuntu22"
                    $image_readme_name = "Ubuntu2204-Readme.md"
                    $build_template_name = "build.ubuntu-22_04.pkr.hcl"
                  }
                  'ubuntu2404' {
                    $os = "ubuntu"
                    $image_os = "ubuntu24"
                    $image_readme_name = "Ubuntu2404-Readme.md"
                    $build_template_name = "build.ubuntu-24_04.pkr.hcl"
                  }
                }

                $template_path = Join-Path (Join-Path (Join-Path "runner-images" "images") $os) "templates"
                $image_name = "$image_type-$(Build.BuildId)"
                $temp_rg_name = "packer-temp-$image_name"
                $gallery_image_name = "$image_type-agentpool-full"
                $gallery_image_version = "$((Get-Date).ToString("yyyyMMdd")).$(Build.BuildId).0"

                Write-Host "##vso[task.setvariable variable=repository_base_path]$repository_base_path"
                Write-Host "##vso[task.setvariable variable=runner_images_version]$runner_images_version"
                Write-Host "##vso[task.setvariable variable=image_type]$image_type"
                Write-Host "##vso[task.setvariable variable=image_os]$image_os"
                Write-Host "##vso[task.setvariable variable=image_readme_name]$image_readme_name"
                Write-Host "##vso[task.setvariable variable=build_template_name]$build_template_name"
                Write-Host "##vso[task.setvariable variable=template_path]$template_path"
                Write-Host "##vso[task.setvariable variable=image_name]$image_name"
                Write-Host "##vso[task.setvariable variable=temp_rg_name]$temp_rg_name"
                Write-Host "##vso[task.setvariable variable=gallery_image_name]$gallery_image_name"
                Write-Host "##vso[task.setvariable variable=gallery_image_version]$gallery_image_version"
                

                $client_id = "$(DOBA-CLIENT-ID)"
                $client_secret = "$(DOBA-CLIENT-SECRET)"
                $location = "$(DOBA-LOCATION)"
                $tenant_id = "$(DOBA-TENANT-ID)"
                $subscription_id = "$(DOBA-SUBSCRIPTION-ID)"
                $image_rg_name = "$(DOBA-RESOURCE-GROUP)"
                $gallery_name = "$(DOBA-GALLERY-NAME)"
                $gallery_rg_name = "$(DOBA-GALLERY-RESOURCE-GROUP)"
                $gallery_storage_account_type = "$(DOBA-GALLERY-STORAGE-ACCOUNT-TYPE)"
                try { $vnet_name = "$(DOBA-VNET-NAME)" } catch { $vnet_name = $null }
                try { $vnet_rg = "$(DOBA-VNET-RESOURCE-GROUP)" } catch { $vnet_rg = $null }
                try { $vnet_subnet = "$(DOBA-VNET-SUBNET)" } catch { $vnet_subnet = $null }

                Write-Host "##vso[task.setvariable variable=client_id]$client_id"
                Write-Host "##vso[task.setvariable variable=client_secret;isSecret=true]$client_secret"
                Write-Host "##vso[task.setvariable variable=location]$location"
                Write-Host "##vso[task.setvariable variable=tenant_id]$tenant_id"
                Write-Host "##vso[task.setvariable variable=subscription_id]$subscription_id"
                Write-Host "##vso[task.setvariable variable=image_rg_name]$image_rg_name"
                Write-Host "##vso[task.setvariable variable=gallery_name]$gallery_name"
                Write-Host "##vso[task.setvariable variable=gallery_rg_name]$gallery_rg_name"
                Write-Host "##vso[task.setvariable variable=gallery_storage_account_type]$gallery_storage_account_type"
                Write-Host "##vso[task.setvariable variable=vnet_name]$vnet_name"
                Write-Host "##vso[task.setvariable variable=vnet_rg]$vnet_rg"
                Write-Host "##vso[task.setvariable variable=vnet_subnet]$vnet_subnet"

          # - task: PowerShell@2
          #   name: gitCheckout
          #   displayName: 'Checkout the GitHub repository'
          #   inputs:
          #     targetType: 'inline'
          #     script: |
          #       $github_owner = 'actions'
          #       $repo_name = 'runner-images'

          #       if (Test-Path ".\$repo_name\") { Remove-Item -Recurse -Force ".\$repo_name\" }

          #       git clone "https://github.com/$github_owner/$repo_name.git"
                
          #       if ('$(runner_images_version)' -ne 'alpha') {
          #         $include_prerelease = if ('$(runner_images_version)' -eq 'prerelease') { $true } else { $false }
          #         Write-Output "include_prerelease = $include_prerelease"
          #         $latest_release = ${{ parameters.repository_base_path }}/scripts/get-latestgithubrelease.ps1 -OSTagPrefix '$(image_os)' -GitHubOwner $github_owner -RepoName $repo_name -IncludePrerelease $include_prerelease
          #         Write-Output "latest_release = $latest_release"
          #         cd runner-images
          #         git checkout ($latest_release.tag_name)
          #       }
          - task: bash@3
            displayName: 'List files in the repository'
            inputs:
              targetType: 'inline'
              script: |
                pwd
                ls -l
                exit 1

          - task: PowerShell@2
            name: buildVm
            displayName: "Build VM"
            inputs:
              targetType: filePath
              filePath: ./runner-images/images.CI/linux-and-win/build-image.ps1
              arguments: -TemplatePath '$(template_path)' `
                -BuildTemplateName '$(build_template_name)' `
                -ClientId '$(client_id)' `
                -ClientSecret '$(client_secret)' `
                -Location '$(location)' `
                -ImageName '$(image_name)' `
                -ImageResourceGroupName '$(image_rg_name)' `
                -TempResourceGroupName '$(temp_rg_name)' `
                -SubscriptionId '$(subscription_id)' `
                -TenantId '$(tenant_id)' `
                -ImageOs '$(image_os)' `
                -VirtualNetworkName '$(vnet_name)' `
                -VirtualNetworkRG '$(vnet_rg)' `
                -VirtualNetworkSubnet '$(vnet_subnet)'
            env:
              PACKER_LOG: 1
              PACKER_LOG_PATH: "$(Agent.TempDirectory)/packer-log.txt"
              GALLERY_NAME: "$(gallery_name)"
              GALLERY_RG_NAME: "$(gallery_rg_name)"
              GALLERY_IMAGE_NAME: "$(gallery_image_name)"
              GALLERY_IMAGE_VERSION: "$(gallery_image_version)"
              GALLERY_STORAGE_ACCOUNT_TYPE: "$(gallery_storage_account_type)"

          - task: PowerShell@2
            displayName: 'Copy image artifacts to the separate directory'
            inputs:
              targetType: 'inline'
              script: |
                $rootDirectoryName = if ("$(image_type)".StartsWith("ubuntu")) { "ubuntu" } else { "windows" }
                $rootDirectoryPath = Join-Path (Join-Path "runner-images" "images") $rootDirectoryName | Resolve-Path

                $readmePath = Join-Path $rootDirectoryPath "$(image_readme_name)"
                $softwareReportPath = Join-Path $rootDirectoryPath "software-report.json"

                Copy-Item -Path $readmePath -Destination "$(Build.ArtifactStagingDirectory)/"
                if (Test-Path $softwareReportPath) {
                    Copy-Item -Path $softwareReportPath -Destination "$(Build.ArtifactStagingDirectory)/"
                }

          - task: PowerShell@2
            displayName: 'Print markdown software report'
            inputs:
              targetType: 'inline'
              script: |
                Get-Content -Path "$(Build.ArtifactStagingDirectory)/$(image_readme_name)"

          - task: PowerShell@2
            displayName: 'Print json software report'
            inputs:
              targetType: 'inline'
              script: |
                $softwareReportPath = "$(Build.ArtifactStagingDirectory)/software-report.json"
                if (Test-Path $softwareReportPath) {
                    Get-Content -Path $softwareReportPath
                }

          - task: PublishBuildArtifacts@1
            inputs:
              ArtifactName: 'Built_VM_Artifacts'
            displayName: Publish Artifacts

          - task: PowerShell@2
            displayName: 'Print provisioners duration'
            inputs:
              targetType: 'filePath'
              filePath: ./runner-images/images.CI/measure-provisioners-duration.ps1
              arguments:
                -PackerLogPath "$(Agent.TempDirectory)/packer-log.txt" `
                -PrefixToPathTrim "$(template_path)" `
                -PrintTopNLongest 25

          - task: PowerShell@2
            displayName: 'Authenticate to Azure in Azure CLI'
            condition: always()
            inputs:
              targetType: 'inline'
              script: |
                az login --service-principal --username '$(client_id)' --password '$(client_secret)' --tenant '$(tenant_id)' | Out-Null
                az account set --subscription '$(subscription_id)' | Out-Null

          - task: PowerShell@2
            displayName: "Clean up resources"
            condition: always()
            inputs:
              targetType: filePath
              filePath: ./runner-images/images.CI/linux-and-win/cleanup.ps1
              arguments: -TempResourceGroupName "$(temp_rg_name)"

          - task: PowerShell@2
            displayName: "Clean up temporary image"
            condition: always()
            inputs:
              targetType: filePath
              filePath: ${{ parameters.repository_base_path }}/scripts/cleanup-gallery-temporaryimage.ps1
              arguments: -ManagedImageName '$(image_name)' `
               -ResourceGroup '$(image_rg_name)'